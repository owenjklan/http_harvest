#!/usr/bin/env python3
import requests
import sys
import time
import random

import click

from action import ScanAction
from utility import get_geolocation, get_initial_url
from output import (
    cyan_text, red_text, green_text, yellow_text, magenta_text,
    format_ip_from_parts, info_banner, title_banner,
    DefaultOutput,
)
import plugins


class CapturedHttp(object):
    def __init__(self, ipaddr, response):
        self.ipaddr = ipaddr
        self.status_code = response.status_code
        try:
            self.server = response.headers['Server']
        except KeyError:
            self.server = "Not Available"
        self.cookies = response.cookies
        self.headers = response.headers

    def __str__(self):
        try:
            outstr = "[{:17s}] <{}>  ({})".format(
                self.ipaddr, self.status_code, self.server)
        except Exception as e:
            outstr = "An exception occurred: {}".format(e)
        return outstr


DEFAULT_TIMEOUT = 4
DEFAULT_PORT = 80
DEFAULT_PORT_LIST = [80, 8080]
timeout_used = DEFAULT_TIMEOUT


output = DefaultOutput()


def get_auth_details(headers, verbose=False):
    try:
        auth = headers['www-authenticate']
    except KeyError as ke:
        if verbose:
            print("No Auth Header: ", ke)
        return (None, None)

    auth_type, realm_parts = auth.split(' ', 1)
    realm = realm_parts.split('=', 1)[1]
    return auth_type, realm


def summarise_found_hosts(host_list):
    for host in host_list:
        print(host)


@click.command()
@click.argument('network', type=str)
@click.option('--timeout', '-t', 'timeout',
              type=int, default=DEFAULT_TIMEOUT,
              help=("Specify connection timeout value in seconds. "
                    "Default: {} seconds".format(DEFAULT_TIMEOUT)))
@click.option('--verbose', '-v', 'verbose',
              is_flag=True, default=False,
              help=("Display additional information. Useful for interactive."))
@click.option('--port', '-p', 'scan_port',
              type=int, default=DEFAULT_PORT,
              help=("Specify specific port to connect to. "
                    "Default: {}".format(DEFAULT_PORT)))
@click.option('--summarise', '-s', 'summarise',
              is_flag=True, default=False,
              help=("Display summary of found hosts at end of scan."))
def main(network, timeout, verbose, scan_port, summarise):
    """
    HTTP Harvester - Rattling doorknobs in your local Class C

    Performs simple connection-based scans, attempting to connect
    to port 80, looking for HTTP servers.

    When a server has been found, the reported Server header is shown.
    """
    hosts_list = []

    target = network
    ip_parts = target.split('.')
    copy_ip = ip_parts
    copy_ip[3] = str(0)

    scanned_set = set()

    # max_time = DEFAULT_TIMEOUT * 254
    total_time = 0

    location = get_geolocation(network)

    print(title_banner("  HTTP Harvest Scan on {}  |  {}{}".format(
          format_ip_from_parts(copy_ip), location, 20 * " ")))

    # Begin main scan: know beginning IP, geoip
    while len(scanned_set) < 254:
        auth_type = auth_realm = None
        host_byte = random.randint(1, 254)
        if host_byte in scanned_set:
            continue

        status_string = ""
        server = "???"
        country = "???"
        copy_ip[3] = str(host_byte)
        try:
            ip_str = format_ip_from_parts(copy_ip)
            initial_url = get_initial_url(ip_str, port=scan_port)
            scan = ScanAction(ip_str, scan_port, "http")
            # Initial request start
            start_time = time.time()

            # Use plugin
            output.start_scan(copy_ip, initial_url, scan_port)

            session = requests.Session()
            r = session.get(initial_url, timeout=float(timeout))
            scan.response = r

            try:
                server = r.headers['Server']
            except KeyError:
                pass

            if r.status_code == 200:
                status_string = green_text("{:^5}".format("OK"))

                current_ip = format_ip_from_parts(copy_ip)
                country = get_geolocation(current_ip)
                scan.country = country if country else "???"

                # Run plugins with current details.
                scan.plugin_output = plugins.run_all_plugins(scan, session)
            elif r.status_code > 400 and r.status_code < 500:
                status_string = yellow_text("{:^5}".format(
                    str(r.status_code)))

                country = get_geolocation(format_ip_from_parts(copy_ip))

                if r.status_code == 401:
                    auth_type, auth_realm = get_auth_details(r.headers)
                    scan.auth_realm = auth_realm

            hosts_list.append(
                CapturedHttp(format_ip_from_parts(copy_ip), r)
            )
        except requests.Timeout as e:
            status_string = magenta_text("{:^5}".format("T.O"))
        except requests.ConnectionError as e:
            status_string = red_text("{:^5}".format("C.E"))
        except requests.TooManyRedirects as e:
            status_string = cyan_text("{:^5}".format("R.L"))
        except KeyboardInterrupt as e:
            print("\n\n  ***  Scan Interrupted  *** ", end='')
            print(" {}/254 hosts scanned  ***\n".format(len(scanned_set)))
            if summarise:
                summarise_found_hosts(hosts_list)
            sys.exit(1)

        # Finalise printing status
        scan.status_string = status_string
        scan.server = server[:19]
        scan.end_time = time.time()
        total_time += (scan.end_time - scan.start_time)

        # Individual Scan end
        output.finish_scan(scan)
        scanned_set.add(host_byte)

    # Bulk scan end:
    # Total-time in seconds, hosts list
    print("Scan took {:3.1f} minutes".format(total_time / 60))

    print("\nInfo found for {} hosts".format(len(hosts_list)))
    print("".format())

    if summarise:
        summarise_found_hosts(hosts_list)


if __name__ == '__main__':
    main()
